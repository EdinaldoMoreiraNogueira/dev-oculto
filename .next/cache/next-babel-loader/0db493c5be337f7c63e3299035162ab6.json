{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/acer/Diversos/devweek/dev-oculto/pages/secret/[id].js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport SecretHeader from '../../src/components/Headers/SecretHeader';\nimport AdminSecretHeader from '../../src/components/Headers/AdminSecretHeaders';\nimport Participants from '../../src/components/Participants';\nimport Sort from '../../src/components/Sort';\n\nfunction Secret({\n  participants,\n  hasDrew,\n  isAdmin\n}) {\n  const {\n    0: localParticipants,\n    1: setLocalParticipants\n  } = useState([]);\n  useEffect(() => {\n    setLocalParticipants(participants);\n    console.log({\n      participants,\n      hasDrew,\n      isAdmin\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isAdmin && /*#__PURE__*/_jsxDEV(AdminSecretHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 20\n    }, this), !isAdmin && /*#__PURE__*/_jsxDEV(SecretHeader, {\n      onAddParticipant: participant => setLocalParticipants([...localParticipants, participant])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Participants, {\n      showButton: isAdmin,\n      participants: localParticipants,\n      setParticipants: setLocalParticipants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), isAdmin && /*#__PURE__*/_jsxDEV(Sort, {\n      hasDrew: hasDrew\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true);\n}\n\nexport async function getServerSideProps(context) {\n  const data = await getSecretsById(context.query);\n  return {\n    props: _objectSpread(_objectSpread({}, data), context.query)\n  };\n}\n\nasync function getSecretsById({\n  id,\n  adminKey\n}) {\n  const {\n    NEXT_PUBLIC_API_URL\n  } = process.env;\n  const res = await fetch(`${NEXT_PUBLIC_API_URL}/secrets/${id}`, {\n    method: \"GET\",\n    headers: new Headers({\n      'admin-key': adminKey\n    })\n  });\n  return await res.json();\n}\n\nexport default Secret;","map":{"version":3,"sources":["/home/acer/Diversos/devweek/dev-oculto/pages/secret/[id].js"],"names":["useState","useEffect","SecretHeader","AdminSecretHeader","Participants","Sort","Secret","participants","hasDrew","isAdmin","localParticipants","setLocalParticipants","console","log","participant","getServerSideProps","context","data","getSecretsById","query","props","id","adminKey","NEXT_PUBLIC_API_URL","process","env","res","fetch","method","headers","Headers","json"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,iBAAP,MAA8B,iDAA9B;AACA,OAAOC,YAAP,MAAyB,mCAAzB;AACA,OAAOC,IAAP,MAAiB,2BAAjB;;AAEA,SAASC,MAAT,CAAiB;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,OAAhB;AAAyBC,EAAAA;AAAzB,CAAjB,EAAqD;AACnD,QAAM;AAAA,OAACC,iBAAD;AAAA,OAAoBC;AAApB,MAA4CX,QAAQ,CAAC,EAAD,CAA1D;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,oBAAoB,CAACJ,YAAD,CAApB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEN,MAAAA,YAAF;AAAgBC,MAAAA,OAAhB;AAAyBC,MAAAA;AAAzB,KAAZ;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACE;AAAA,eAEIA,OAAO,iBAAI,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,YAFf,EAKI,CAACA,OAAD,iBACA,QAAC,YAAD;AACE,MAAA,gBAAgB,EACbK,WAAD,IAAiBH,oBAAoB,CAAC,CAAC,GAAGD,iBAAJ,EAAuBI,WAAvB,CAAD;AAFzC;AAAA;AAAA;AAAA;AAAA,YANJ,eAYE,QAAC,YAAD;AACE,MAAA,UAAU,EAAEL,OADd;AAEE,MAAA,YAAY,EAAEC,iBAFhB;AAGE,MAAA,eAAe,EAAEC;AAHnB;AAAA;AAAA;AAAA;AAAA,YAZF,EAkBIF,OAAO,iBAAI,QAAC,IAAD;AAAM,MAAA,OAAO,EAAED;AAAf;AAAA;AAAA;AAAA;AAAA,YAlBf;AAAA,kBADF;AAuBD;;AAED,OAAO,eAAeO,kBAAf,CAAkCC,OAAlC,EAA2C;AAChD,QAAMC,IAAI,GAAG,MAAMC,cAAc,CAACF,OAAO,CAACG,KAAT,CAAjC;AACA,SAAO;AACLC,IAAAA,KAAK,kCAAOH,IAAP,GAAgBD,OAAO,CAACG,KAAxB;AADA,GAAP;AAGD;;AAED,eAAeD,cAAf,CAA+B;AAACG,EAAAA,EAAD;AAAKC,EAAAA;AAAL,CAA/B,EAA+C;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAA0BC,OAAO,CAACC,GAAxC;AAEA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEJ,mBAAoB,YAAWF,EAAG,EAAtC,EAAyC;AAC9DO,IAAAA,MAAM,EAAE,KADsD;AAE9DC,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,mBAAaR;AADM,KAAZ;AAFqD,GAAzC,CAAvB;AAOA,SAAO,MAAMI,GAAG,CAACK,IAAJ,EAAb;AACD;;AAED,eAAezB,MAAf","sourcesContent":["import { useState, useEffect } from 'react'\n\nimport SecretHeader from '../../src/components/Headers/SecretHeader'\nimport AdminSecretHeader from '../../src/components/Headers/AdminSecretHeaders'\nimport Participants from '../../src/components/Participants'\nimport Sort from '../../src/components/Sort'\n\nfunction Secret ({ participants, hasDrew, isAdmin }) {\n  const [localParticipants, setLocalParticipants] = useState([])\n\n  useEffect(() => {\n    setLocalParticipants(participants)\n    console.log({ participants, hasDrew, isAdmin })\n  }, [])\n\n  return (\n    <>\n      {\n        isAdmin && <AdminSecretHeader />\n      }\n      {\n        !isAdmin && \n        <SecretHeader\n          onAddParticipant={\n            (participant) => setLocalParticipants([...localParticipants, participant])\n          }\n        />\n      }\n      <Participants \n        showButton={isAdmin} \n        participants={localParticipants} \n        setParticipants={setLocalParticipants} \n      />\n      {\n        isAdmin && <Sort hasDrew={hasDrew} />\n      }\n    </>\n  )\n}\n\nexport async function getServerSideProps(context) {\n  const data = await getSecretsById(context.query)\n  return {\n    props: { ...data, ...context.query }\n  }\n}\n\nasync function getSecretsById ({id, adminKey}) {\n  const { NEXT_PUBLIC_API_URL } = process.env\n\n  const res = await fetch(`${NEXT_PUBLIC_API_URL}/secrets/${id}`, {\n    method: \"GET\",\n    headers: new Headers({\n      'admin-key': adminKey\n    })\n  })\n\n  return await res.json()\n}\n\nexport default Secret\n"]},"metadata":{},"sourceType":"module"}