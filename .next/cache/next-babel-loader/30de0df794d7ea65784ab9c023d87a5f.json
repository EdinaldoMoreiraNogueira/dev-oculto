{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport SecretHeader from '../../src/components/Headers/SecretHeader';\nimport AdminSecretHeader from '../../src/components/Headers/AdminSecretHeaders';\nimport Participants from '../../src/components/Participants';\nimport Sort from '../../src/components/Sort';\n\nfunction Secret({\n  participants,\n  hasDrew,\n  isAdmin\n}) {\n  const {\n    0: localParticipants,\n    1: setLocalParticipants\n  } = useState([]);\n  useEffect(() => {\n    setLocalParticipants(participants);\n    console.log({\n      participants,\n      hasDrew,\n      isAdmin\n    });\n  }, []);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [isAdmin && /*#__PURE__*/_jsx(AdminSecretHeader, {}), !isAdmin && /*#__PURE__*/_jsx(SecretHeader, {\n      onAddParticipant: participant => setLocalParticipants([...localParticipants, participant])\n    }), /*#__PURE__*/_jsx(Participants, {\n      showButton: isAdmin,\n      participants: localParticipants,\n      setParticipants: setLocalParticipants\n    }), isAdmin && /*#__PURE__*/_jsx(Sort, {\n      hasDrew: hasDrew\n    })]\n  });\n}\n\nexport async function getServerSideProps(context) {\n  const data = await getSecretsById(context.query);\n  return {\n    props: _objectSpread(_objectSpread({}, data), context.query)\n  };\n}\n\nasync function getSecretsById({\n  id,\n  adminKey\n}) {\n  const {\n    NEXT_PUBLIC_API_URL\n  } = process.env;\n  const res = await fetch(`${NEXT_PUBLIC_API_URL}/secrets/${id}`, {\n    method: \"GET\",\n    headers: new Headers({\n      'admin-key': adminKey\n    })\n  });\n  return await res.json();\n}\n\nexport default Secret;","map":null,"metadata":{},"sourceType":"module"}